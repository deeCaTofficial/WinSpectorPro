# scripts/build.py
"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ WinSpector Pro —Å –ø–æ–º–æ—â—å—é PyInstaller.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∫–∏:
1. –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã Qt (.qrc -> .py).
2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç .spec —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞.
3. –ó–∞–ø—É—Å–∫–∞–µ—Ç PyInstaller —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º .spec —Ñ–∞–π–ª–æ–º.
4. –°–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é ZIP-–∞—Ä—Ö–∏–≤.
5. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏ —Ä–µ–ª–∏–∑–Ω–æ–π —Å–±–æ—Ä–æ–∫.
"""
import os
import shutil
import subprocess
import sys
import re
import logging
from pathlib import Path
import argparse

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format="[%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("build.log", mode='w', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# --- 2. –ì–õ–ê–í–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
APP_NAME = "WinSpectorPro"
ENTRY_POINT = "src/main.py"
PROJECT_ROOT = Path(__file__).parent.parent.resolve()
DIST_PATH = PROJECT_ROOT / "dist"
BUILD_PATH = PROJECT_ROOT / "build"
ICON_PATH = PROJECT_ROOT / "assets" / "app.ico"

def get_project_version() -> str:
    """–ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ __init__.py —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è."""
    init_py_path = PROJECT_ROOT / "src" / "winspector" / "__init__.py"
    try:
        content = init_py_path.read_text(encoding="utf-8")
        match = re.search(r"^__version__\s*=\s*['\"]([^'\"]*)['\"]", content, re.M)
        if match:
            return match.group(1)
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ __version__ –≤ —Ñ–∞–π–ª–µ.")
    except FileNotFoundError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {init_py_path} –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏.")
        sys.exit(1)
    except RuntimeError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

APP_VERSION = get_project_version()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è .spec —Ñ–∞–π–ª–∞
SPEC_CONFIG = {
    "datas": [
        ("src/winspector/data/knowledge_base", "winspector/data/knowledge_base"),
        ("src/winspector/resources/styles", "winspector/resources/styles"),
        ("assets", "assets"),
    ],
    "hiddenimports": [
        "pygments", "google.generativeai.protos", "grpc._cython", "qasync",
        "PyQt6.sip", "PyQt6.Qt6", "PyQt6.QtGui", "PyQt6.QtWidgets", "PyQt6.QtCore",
    ],
    "excludes": [
        "pytest", "PyQt5", "PySide6", "tkinter", "unittest", "pydoc", "pydoc_data",
    ]
}

# --- 3. –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ---

def run_command(command: list, description: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ–µ –≤—ã–≤–æ–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è UTF-8."""
    logging.info(f"–ù–∞—á–∞–ª–æ: {description}...")
    try:
        # ### –£–õ–£–ß–®–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É ###
        env = os.environ.copy()
        env["PYTHONIOENCODING"] = "utf-8"
        
        # ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º text=True –∏ encoding, –±—É–¥–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é ###
        process = subprocess.run(
            command, check=True, capture_output=True, env=env
        )
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        stdout = process.stdout.decode('utf-8', errors='ignore')
        stderr = process.stderr.decode('utf-8', errors='ignore')

        if stdout:
            logging.info(stdout)
        if stderr:
            logging.warning(stderr) # –õ–æ–≥–∏—Ä—É–µ–º stderr –∫–∞–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

        logging.info(f"–£—Å–ø–µ—à–Ω–æ: {description}.")

    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê: {description} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–∂–µ
        stdout = e.stdout.decode('utf-8', errors='ignore')
        stderr = e.stderr.decode('utf-8', errors='ignore')
        if stdout:
            logging.error(stdout)
        if stderr:
            logging.error(stderr)
        sys.exit(1)
    except FileNotFoundError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ '{command[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ PATH.")
        sys.exit(1)

def get_version_file_info() -> Path:
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ä—Å–∏–∏ –¥–ª—è Windows."""
    version_file_content = f"""
# UTF-8
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=({APP_VERSION.replace('.', ',')}, 0),
    prodvers=({APP_VERSION.replace('.', ',')}, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'CLC corporation'),
        StringStruct(u'FileDescription', u'WinSpector Pro - AI-Powered Windows Optimizer'),
        StringStruct(u'FileVersion', u'{APP_VERSION}'),
        StringStruct(u'InternalName', u'{APP_NAME}'),
        StringStruct(u'LegalCopyright', u'¬© CLC corporation. All rights reserved.'),
        StringStruct(u'OriginalFilename', u'{APP_NAME}.exe'),
        StringStruct(u'ProductName', u'WinSpector Pro'),
        StringStruct(u'ProductVersion', u'{APP_VERSION}')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"""
    version_file_path = BUILD_PATH / "version_info.txt"
    version_file_path.write_text(version_file_content, encoding="utf-8")
    logging.info(f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ {APP_VERSION} —Å–æ–∑–¥–∞–Ω–∞.")
    return version_file_path

def generate_spec_from_template(is_debug: bool, version_file_path: Path) -> Path:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç .spec —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞."""
    template_path = PROJECT_ROOT / "build.spec.template"
    spec_path = BUILD_PATH / f"{APP_NAME}.spec"
    logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞: {template_path}")

    if not template_path.exists():
        logging.error(f"‚ùå –®–∞–±–ª–æ–Ω '{template_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

    template_content = template_path.read_text(encoding="utf-8")

    datas_list = [
        f"('{str(PROJECT_ROOT / src).replace(os.sep, '/')}', '{dest}')"
        for src, dest in SPEC_CONFIG['datas']
    ]

    spec_content = template_content.format(
        entry_point=(PROJECT_ROOT / ENTRY_POINT).as_posix(),
        project_root=PROJECT_ROOT.as_posix(),
        datas=",".join(datas_list),
        hiddenimports=SPEC_CONFIG['hiddenimports'],
        excludes=SPEC_CONFIG['excludes'],
        app_name=APP_NAME,
        debug='True' if is_debug else 'False',
        console='True' if is_debug else 'False',
        icon_path=ICON_PATH.as_posix(),
        version_file_path=version_file_path.as_posix(),
    )

    spec_path.write_text(spec_content, encoding='utf-8')
    logging.info(f"–§–∞–π–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {spec_path}")
    return spec_path

def create_distribution_archive():
    """–°–æ–∑–¥–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # ### –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ ###
    
    # –ò–º—è –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–ª PyInstaller –≤–Ω—É—Ç—Ä–∏ 'dist'
    source_folder_name = APP_NAME 
    # –ü—É—Ç—å –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ
    source_path = DIST_PATH / source_folder_name
    
    # –ò–º—è –¥–ª—è ZIP-–∞—Ä—Ö–∏–≤–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    archive_name = f"{APP_NAME}-v{APP_VERSION}"
    # –ü—É—Ç—å, –≥–¥–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤ (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, –≤ —Å–∞–º–æ–π –ø–∞–ø–∫–µ dist)
    archive_path_base = DIST_PATH / archive_name

    logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {archive_path_base}.zip")
    
    shutil.make_archive(
        base_name=str(archive_path_base),
        format='zip',
        root_dir=str(DIST_PATH), # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ "–∫–æ—Ä–µ–Ω—å" –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ - —ç—Ç–æ –ø–∞–ø–∫–∞ dist
        base_dir=source_folder_name # –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ root_dir –Ω—É–∂–Ω–æ —É–ø–∞–∫–æ–≤–∞—Ç—å
    )
    logging.info("–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏."""
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ WinSpector Pro.")
    parser.add_argument("--debug", action="store_true", help="–°–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
    parser.add_argument("--no-clean", action="store_true", help="–ù–µ —É–¥–∞–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏.")
    parser.add_argument("--no-archive", action="store_true", help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å ZIP-–∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏.")
    args = parser.parse_args()

    build_type = "DEBUG" if args.debug else "RELEASE"
    logging.info(f"üöÄ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ WinSpector Pro v{APP_VERSION} ({build_type})...")

    # 1. –û—á–∏—Å—Ç–∫–∞
    if DIST_PATH.exists(): shutil.rmtree(DIST_PATH)
    if BUILD_PATH.exists(): shutil.rmtree(BUILD_PATH)
    DIST_PATH.mkdir(exist_ok=True)
    BUILD_PATH.mkdir(exist_ok=True)

    # 2. –ü—Ä–µ–¥-—Å–±–æ—Ä–æ—á–Ω—ã–µ —à–∞–≥–∏
    run_command([sys.executable, "scripts/compile_resources.py"], "–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ Qt")
    version_file = get_version_file_info()

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .spec —Ñ–∞–π–ª–∞
    spec_file = generate_spec_from_template(args.debug, version_file)

    # 4. –ó–∞–ø—É—Å–∫ PyInstaller
    run_command([sys.executable, "-m", "PyInstaller", str(spec_file), "--noconfirm"], 
                "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å PyInstaller")
    
    # 5. –ü–æ—Å—Ç-—Å–±–æ—Ä–æ—á–Ω—ã–µ —à–∞–≥–∏
    if not args.no_archive:
        create_distribution_archive()

    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    if not args.no_clean:
        logging.info("‚ú® –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
        if BUILD_PATH.exists(): shutil.rmtree(BUILD_PATH)
        if spec_file.exists(): spec_file.unlink()
        logging.info(f"   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

    logging.info("üèÅ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()