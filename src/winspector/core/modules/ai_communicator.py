# src/winspector/core/modules/ai_communicator.py
"""
–ú–æ–¥—É–ª—å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ" –∑–∞–¥–∞—á–∏ –ò–ò:
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
"""
import json
import logging
import re
from typing import Dict, Any, List

from .ai_base import AIBase

logger = logging.getLogger(__name__)


class AICommunicator(AIBase):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–¥–∞—á–∏, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config, model_name='gemini-2.0-flash')

    @staticmethod
    def _extract_json_from_response(text: str) -> Dict:
        """–ù–∞–¥–µ–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON –æ–±—ä–µ–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò, —É–¥–∞–ª—è—è –æ–±–µ—Ä—Ç–∫—É ```json."""
        match = re.search(r'```json\s*(\{.*\}|\[.*\])\s*```', text, re.DOTALL)
        
        json_text = match.group(1) if match else text

        try:
            return json.loads(json_text)
        except json.JSONDecodeError as e:
            # ### –£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON ###
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON. –û—à–∏–±–∫–∞: {e}. –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫
            # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –±—ã–ª –ø—Ä–æ—Å—Ç–æ –æ–±–æ—Ä–≤–∞–Ω.
            corrected_text = re.sub(r'[,\s]+$', '', json_text) # –£–±–∏—Ä–∞–µ–º –≤–∏—Å—è—á–∏–µ –∑–∞–ø—è—Ç—ã–µ
            if corrected_text.count('{') > corrected_text.count('}'):
                 corrected_text += '}'
            if corrected_text.count('[') > corrected_text.count(']'):
                 corrected_text += ']'
            
            try:
                logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ JSON.")
                return json.loads(corrected_text)
            except json.JSONDecodeError:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {json_text}")
                 raise ValueError(f"JSON-–æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò.") from e

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ ---

    def _create_profile_prompt(self, system_data: Dict, kb_config: Dict) -> str:
        # ### –£–õ–£–ß–®–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ###
        return f"""
        Analyze the user's system data to determine their profiles. A user can have multiple profiles.
        Available profiles: 'Gamer', 'Developer', 'Designer', 'OfficeWorker', 'Streamer', 'ContentCreator', 'AudioEngineer', 'PowerUser', 'HomeUser'.
        
        Your task is to return a JSON object with a key "profiles" containing a LIST of all relevant profile strings.
        - If no specific profile is detected, return ["HomeUser"].
        - Use `user_folder_stats` and `shortcuts` as strong indicators of user activity.
        
        Example for a developer who also plays games:
        {{
          "profiles": ["Developer", "Gamer", "PowerUser"]
        }}
        
        Profiler Configuration (keywords to look for in software list):
        {json.dumps(kb_config, indent=2)}

        System Data (Pay close attention to `shortcuts` and `user_folder_stats`):
        {json.dumps(system_data, indent=2, default=str)}
        """

    def _create_report_prompt(self, summary: Dict, plan: List[Dict], profiles: List[str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è."""
        
        debloat_summary = summary.get("debloat", {})
        cleanup_summary = summary.get("cleanup", {})
        empty_folders_summary = summary.get("empty_folders", {})
        disabled_services_count = len(debloat_summary.get("disabled_services", []))
        removed_apps_count = len(debloat_summary.get("removed_apps", []))
        cleaned_size_bytes = cleanup_summary.get("cleaned_size_bytes", 0)
        deleted_folders_count = empty_folders_summary.get("deleted_folders_count", 0)
        total_actions = disabled_services_count + removed_apps_count

        def format_bytes(b: int) -> str:
            if b <= 0: return "0 –±–∞–π—Ç"
            gb, mb, kb = b / (1024**3), b / (1024**2), b / 1024
            return f"{gb:.2f} –ì–ë" if gb >= 1 else f"{mb:.1f} –ú–ë" if mb >= 1 else f"{kb:.1f} –ö–ë" if kb >= 1 else f"{b} –±–∞–π—Ç"

        if total_actions > 5 or cleaned_size_bytes > 500 * 1024 * 1024:
            tone_instruction = "The tone should be positive and celebratory. Use emojis like ‚úÖ, üöÄ, üí™."
            headline_suggestion = "## üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."
        elif total_actions > 0 or cleaned_size_bytes > 0:
            tone_instruction = "The tone should be calm and informative, like a helpful assistant."
            headline_suggestion = "## ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        else:
            tone_instruction = "The tone should be reassuring and professional. Explain that the system is already in good shape."
            headline_suggestion = "## üõ°Ô∏è –í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!"

        actions_performed_str = "\n".join(
            [f"- {action['user_explanation_ru']}" for action in plan if action.get("user_explanation_ru")]
        )
        if not actions_performed_str:
            actions_performed_str = "–î–µ–π—Å—Ç–≤–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å."

        # ### –£–õ–£–ß–®–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –ø—Ä–æ–º–ø—Ç ###
        return f"""
        You are "WinSpector AI Communicator". Your job is to create a friendly, well-formatted report in Russian Markdown.

        **USER PROFILES:** {json.dumps(profiles)}
        Use this information to add context to your report. For example: "Since you are a Gamer, we focused on..."

        **TONE & HEADLINE:**
        - Tone: {tone_instruction}
        - Suggested Headline: {headline_suggestion}

        **METRICS TO INCLUDE:**
        - Space freed: {format_bytes(cleaned_size_bytes)}
        - Services disabled: {disabled_services_count}
        - UWP apps removed: {removed_apps_count}
        - Empty folders removed: {deleted_folders_count}

        **DETAILED ACTIONS PERFORMED:**
        {actions_performed_str}

        **TASK:**
        Create a concise, personalized report in Russian Markdown. It must include:
        1. A headline reflecting the outcome.
        2. A summary of key metrics.
        3. A "–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:" section with the list of actions.
        4. A personalized closing statement about safety, mentioning the user's profiles if relevant.
        """

    # --- –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã API ---

    async def determine_user_profile(self, system_data: Dict, kb_config: Dict) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        prompt = self._create_profile_prompt(system_data, kb_config)
        response_text = await self._get_response_with_cache(prompt, "determine_user_profile")
        
        try:
            profile_data = self._extract_json_from_response(response_text)
            profiles = profile_data.get("profiles", ["HomeUser"])
            
            if not isinstance(profiles, list) or not all(isinstance(p, str) for p in profiles) or not profiles:
                logger.warning(f"–ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {profiles}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'HomeUser'.")
                return ["HomeUser"]

            logger.info(f"–ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ—Ñ–∏–ª–∏: {profiles}")
            return profiles
        except (json.JSONDecodeError, ValueError) as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
            return ["HomeUser"]

    # ### –£–õ–£–ß–®–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ###
    async def generate_final_report(self, summary: Dict, plan: List[Dict], profiles: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        prompt = self._create_report_prompt(summary, plan, profiles)
        return await self._get_response_with_cache(prompt, "generate_final_report", use_cache=False)

    async def get_ai_suggestions_for_improvement(self, **kwargs) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º –∂–µ, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –ø—Ä–æ–º–ø—Ç –æ—á–µ–Ω—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω
        # –∏ —Å–ª–æ–∂–µ–Ω –¥–ª—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ.
        logger.info("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò –Ω–∞ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.")
        
        prompt = f"""
        You are "WinSpector AI Architect", a lead developer reviewing an optimization session.
        Your goal is to suggest future improvements for the application.
        
        SESSION ANALYSIS (JSON format):
        {json.dumps(kwargs, indent=2, ensure_ascii=False, default=str)}
        
        TASK:
        Based on this session's data, suggest 3-5 concrete, technical improvements for future versions.
        Focus on proactive monitoring, security, and commercial readiness.
        Respond in Russian Markdown.
        """
        # –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–µ–∂–∏–º
        response = await self.model.generate_content_async(prompt)
        return response.text